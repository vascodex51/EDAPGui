name: Build Executable

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    # Add version info file
    - name: Create Version Info
      run: |
        echo "VSVersionInfo(
          ffi=FixedFileInfo(
            filevers=(1, 0, 0, 0),
            prodvers=(1, 0, 0, 0),
            mask=0x3f,
            flags=0x0,
            OS=0x40004,
            fileType=0x1,
            subtype=0x0,
            date=(0, 0)
          ),
          kids=[
            StringFileInfo([
              StringTable(
                u'040904B0',
                [StringStruct(u'CompanyName', u'EDAP'),
                 StringStruct(u'FileDescription', u'EDAP Autopilot'),
                 StringStruct(u'FileVersion', u'1.0.0'),
                 StringStruct(u'InternalName', u'EDAP_Autopilot'),
                 StringStruct(u'LegalCopyright', u'Copyright (c) 2024'),
                 StringStruct(u'OriginalFilename', u'EDAP-Autopilot.exe'),
                 StringStruct(u'ProductName', u'EDAP Autopilot'),
                 StringStruct(u'ProductVersion', u'1.0.0')])
              ]),
            VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
          ]
        )" > version_info.txt
        
    - name: List directory contents for debugging
      run: |
        echo "Root directory:"
        dir
        echo "====================="
        echo "Screen directory:"
        dir screen
        echo "====================="
        echo "List all Python files:"
        Get-ChildItem -Path . -Filter "*.py" -Recurse | Select-Object FullName
        echo "====================="
        echo "Recursive listing of all directories:"
        Get-ChildItem -Path . -Directory -Recurse | Select-Object FullName

    - name: Build executable
      run: |
        # Create a default config.json if it doesn't exist
        if (-not (Test-Path -Path "config.json")) {
          echo "{}" > config.json
        }
        
        # Create build info file with just the date
        $buildDate = Get-Date -Format "yyyy-MM-dd"
        echo "Build date: $buildDate" > build_info.txt
        
        # Run PyInstaller with options to reduce false positives
        pyinstaller --onefile --windowed --icon="screen\edap.ico" `
          --add-data "screen\edap.ico;screen" `
          --add-data "screen\*.png;screen" `
          --add-data "*.py;." `
          --add-data "build_info.txt;." `
          --add-data "config.json;." `
          --collect-data "paddle" `
          --collect-all "paddleocr" `
          --hidden-import=PIL `
          --hidden-import=PIL._imagingtk `
          --hidden-import=PIL._tkinter_finder `
          --version-file="version_info.txt" `
          --name "EDAP-Autopilot-$buildDate" `
          --clean `
          EDAPGui.py
        
        # Check if build was successful
        if (Test-Path ".\dist\EDAP-Autopilot-$buildDate.exe") {
          echo "Build successful: EDAP-Autopilot-$buildDate.exe"
        } else {
          echo "Build failed or file not found at expected location"
          exit 1
        }

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: EDAP-Autopilot
        path: ./dist/EDAP-Autopilot-*.exe
        retention-days: 90