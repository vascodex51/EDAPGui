# direct inputs
# source to this solution and code:
# http://stackoverflow.com/questions/14489013/simulate-python-keypresses-for-controlling-a-game
# http://www.gamespp.com/directx/directInputKeyboardScanCodes.html

import ctypes
import time

SendInput = ctypes.windll.user32.SendInput

# Listed are keyboard scan code constants, taken from dinput.h
SCANCODE = {
  "Key_Escape": 1,
  "Key_1": 2,
  "Key_2": 3,
  "Key_3": 4,
  "Key_4": 5,
  "Key_5": 6,
  "Key_6": 7,
  "Key_7": 8,
  "Key_8": 9,
  "Key_9": 10,
  "Key_0": 11,
  "Key_Minus": 12,
  "Key_Equals": 13,
  "Key_Backspace": 14,
  "Key_Tab": 15,
  "Key_Q": 16,
  "Key_W": 17,
  "Key_E": 18,
  "Key_R": 19,
  "Key_T": 20,
  "Key_Y": 21,
  "Key_U": 22,
  "Key_I": 23,
  "Key_O": 24,
  "Key_P": 25,
  "Key_LeftBracket": 26,
  "Key_RightBracket": 27,
  "Key_Enter": 28,
  "Key_LeftControl": 29,
  "Key_A": 30,
  "Key_S": 31,
  "Key_D": 32,
  "Key_F": 33,
  "Key_G": 34,
  "Key_H": 35,
  "Key_J": 36,
  "Key_K": 37,
  "Key_L": 38,
  "Key_SemiColon": 39,
  "Key_Apostrophe": 40,
  "Key_Grave": 41,
  "Key_LeftShift": 42,
  "Key_BackSlash": 43,
  "Key_Z": 44,
  "Key_X": 45,
  "Key_C": 46,
  "Key_V": 47,
  "Key_B": 48,
  "Key_N": 49,
  "Key_M": 50,
  "Key_Comma": 51,
  "Key_Period": 52,
  "Key_Slash": 53,
  "Key_RightShift": 54,
  "Key_Numpad_Multiply": 55,
  "Key_LeftAlt": 56,
  "Key_Space": 57,
  "Key_CapsLock": 58,
  "Key_F1": 59,
  "Key_F2": 60,
  "Key_F3": 61,
  "Key_F4": 62,
  "Key_F5": 63,
  "Key_F6": 64,
  "Key_F7": 65,
  "Key_F8": 66,
  "Key_F9": 67,
  "Key_F10": 68,
  "Key_NumLock": 69,
  "Key_ScrollLock": 70,
  "Key_Numpad_7": 71,
  "Key_Numpad_8": 72,
  "Key_Numpad_9": 73,
  "Key_Numpad_Subtract": 74,
  "Key_Numpad_4": 75,
  "Key_Numpad_5": 76,
  "Key_Numpad_6": 77,
  "Key_Numpad_Add": 78,
  "Key_Numpad_1": 79,
  "Key_Numpad_2": 80,
  "Key_Numpad_3": 81,
  "Key_Numpad_0": 82,
  "Key_Numpad_Decimal": 83,
  "??_84": 84,
  "??_85": 85,
  "??_86_duplicate_Key_BackSlash": 86,
  "Key_F11": 87,
  "Key_F12": 88,
  "??_89": 89,
  "??_90": 90,
  "??_91": 91,
  "??_92": 92,
  "??_93": 93,
  "??_94": 94,
  "??_95": 95,
  "??_96": 96,
  "??_97": 97,
  "??_98": 98,
  "??_99": 99,
  "??_100": 100,
  "??_101": 101,
  "??_102": 102,
  "??_103": 103,
  "??_104": 104,
  "??_105": 105,
  "??_106": 106,
  "??_107": 107,
  "??_108": 108,
  "??_109": 109,
  "??_110": 110,
  "??_111": 111,
  "??_112": 112,
  "??_113": 113,
  "??_114": 114,
  "Key_ABNT_C1": 115,
  "??_116": 116,
  "??_117": 117,
  "??_118": 118,
  "??_119": 119,
  "??_120": 120,
  "??_121": 121,
  "??_122": 122,
  "??_123": 123,
  "??_124": 124,
  "??_125": 125,
  "Key_ABNT_C2": 126,
  "??_127": 127,
  "??_128": 128,
  "??_129": 129,
  "??_130": 130,
  "??_131": 131,
  "??_132": 132,
  "??_133": 133,
  "??_134": 134,
  "??_135": 135,
  "??_136": 136,
  "??_137": 137,
  "??_138": 138,
  "??_139": 139,
  "??_140": 140,
  "??_141": 141,
  "??_142": 142,
  "??_143": 143,
  "Key_PrevTrack": 144,
  "??_145": 145,
  "??_146": 146,
  "??_147": 147,
  "??_148": 148,
  "??_149": 149,
  "??_150": 150,
  "??_151": 151,
  "??_152": 152,
  "Key_NextTrack": 153,
  "??_154": 154,
  "??_155": 155,
  "Key_Numpad_Enter": 156,
  "Key_RightControl": 157,
  "??_158": 158,
  "??_159": 159,
  "Key_Mute": 160,
  "Key_Calculator": 161,
  "Key_PlayPause": 162,
  "??_163": 163,
  "Key_MediaStop": 164,
  "??_165": 165,
  "??_166": 166,
  "??_167": 167,
  "??_168": 168,
  "??_169": 169,
  "??_170": 170,
  "??_171": 171,
  "??_172": 172,
  "??_173": 173,
  "Key_VolumeDown": 174,
  "??_175": 175,
  "Key_VolumeUp": 176,
  "??_177": 177,
  "Key_WebHome": 178,
  "??_179": 179,
  "??_180": 180,
  "Key_Numpad_Divide": 181,
  "??_182": 182,
  "Key_SYSRQ": 183,
  "Key_RightAlt": 184,
  "??_185": 185,
  "??_186": 186,
  "??_187": 187,
  "??_188": 188,
  "??_189": 189,
  "??_190": 190,
  "??_191": 191,
  "??_192": 192,
  "??_193": 193,
  "??_194": 194,
  "??_195": 195,
  "??_196": 196,
  "Key_Pause": 197,
  "??_198": 198,
  "Key_Home": 199,
  "Key_UpArrow": 200,
  "Key_PageUp": 201,
  "??_202": 202,
  "Key_LeftArrow": 203,
  "??_204": 204,
  "Key_RightArrow": 205,
  "??_206": 206,
  "Key_End": 207,
  "Key_DownArrow": 208,
  "Key_PageDown": 209,
  "Key_Insert": 210,
  "Key_Delete": 211,
  "??_212": 212,
  "??_213_possibly_print_screen": 213,
  "??_214": 214,
  "??_215": 215,
  "??_216": 216,
  "??_217": 217,
  "??_218": 218,
  "??_219": 219,
  "??_220": 220,
  "Key_Apps": 221,
  "Key_Power": 222,
  "Key_Sleep": 223,
  "??_224": 224,
  "??_225": 225,
  "??_226": 226,
  "Key_Wake": 227,
  "??_228": 228,
  "Key_WebSearch": 229,
  "Key_WebFavourites": 230,
  "Key_WebRefresh": 231,
  "Key_WebStop": 232,
  "Key_WebForward": 233,
  "Key_WebBack": 234,
  "Key_MyComputer": 235,
  "Key_Mail": 236,
  "Key_MediaSelect": 237,
  "??_238": 238,
  "??_239": 239,
  "??_240": 240,
  "??_241": 241,
  "??_242": 242,
  "??_243": 243,
  "??_244": 244,
  "??_245": 245,
  "??_246": 246,
  "??_247": 247,
  "??_248": 248,
  "??_249": 249,
  "??_250": 250,
  "??_251": 251,
  "??_252": 252,
  "??_253": 253,
  "??_254": 254
}


# C struct redefinitions

PUL = ctypes.POINTER(ctypes.c_ulong)
class KeyBdInput(ctypes.Structure):
    _fields_ = [("wVk", ctypes.c_ushort),
                ("wScan", ctypes.c_ushort),
                ("dwFlags", ctypes.c_ulong),
                ("time", ctypes.c_ulong),
                ("dwExtraInfo", PUL)]

class HardwareInput(ctypes.Structure):
    _fields_ = [("uMsg", ctypes.c_ulong),
                ("wParamL", ctypes.c_short),
                ("wParamH", ctypes.c_ushort)]

class MouseInput(ctypes.Structure):
    _fields_ = [("dx", ctypes.c_long),
                ("dy", ctypes.c_long),
                ("mouseData", ctypes.c_ulong),
                ("dwFlags", ctypes.c_ulong),
                ("time",ctypes.c_ulong),
                ("dwExtraInfo", PUL)]

class Input_I(ctypes.Union):
    _fields_ = [("ki", KeyBdInput),
                 ("mi", MouseInput),
                 ("hi", HardwareInput)]

class Input(ctypes.Structure):
    _fields_ = [("type", ctypes.c_ulong),
                ("ii", Input_I)]


# Actual Functions

def PressKey(hexKeyCode):
    extra = ctypes.c_ulong(0)
    ii_ = Input_I()
    ii_.ki = KeyBdInput(0, hexKeyCode, 0x0008, 0, ctypes.pointer(extra))
    x = Input(ctypes.c_ulong(1), ii_)
    ctypes.windll.user32.SendInput(1, ctypes.pointer(x), ctypes.sizeof(x))

def ReleaseKey(hexKeyCode):
    extra = ctypes.c_ulong(0)
    ii_ = Input_I()
    ii_.ki = KeyBdInput(0, hexKeyCode, 0x0008 | 0x0002, 0, ctypes.pointer(extra))
    x = Input(ctypes.c_ulong(1), ii_)
    ctypes.windll.user32.SendInput(1, ctypes.pointer(x), ctypes.sizeof(x))
