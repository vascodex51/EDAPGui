import json
import os
import time
from datetime import datetime, timedelta
import queue
from sys import platform
import threading
from time import sleep
from EDlogger import logger
from WindowsKnownPaths import *


class ModulesInfoParser:
    """ Parses the NavRoute.json file generated by the game. """
    def __init__(self, file_path=None):
        if platform != "win32":
            self.file_path = file_path if file_path else "./linux_ed/ModulesInfo.json"
        else:
            from WindowsKnownPaths import get_path, FOLDERID, UserHandle

            self.file_path = file_path if file_path else (get_path(FOLDERID.SavedGames, UserHandle.current)
                                                          + "/Frontier Developments/Elite Dangerous/ModulesInfo.json")
        self.last_mod_time = None

        # Read json file data
        self.current_data = self.get_module_info_data()

        # self.watch_thread = threading.Thread(target=self._watch_file_thread, daemon=True)
        # self.watch_thread.start()
        # self.status_queue = queue.Queue()

    # def _watch_file_thread(self):
    #     backoff = 1
    #     while True:
    #         try:
    #             self._watch_file()
    #         except Exception as e:
    #             logger.error('An error occurred when reading status file')
    #             sleep(backoff)
    #             logger.debug('Attempting to restart status file reader after failure')
    #             backoff *= 2
    #
    # def _watch_file(self):
    #     """Detects changes in the Status.json file."""
    #     while True:
    #         status = self.get_cleaned_data()
    #         if status != self.current_data:
    #             self.status_queue.put(status)
    #             self.current_data = status
    #         sleep(1)

    def get_file_modified_time(self) -> float:
        return os.path.getmtime(self.file_path)

    def get_module_info_data(self):
        """Loads data from the JSON file and returns the data.
        {"timestamp": "2024-09-29T14:12:22Z", "event": "ModuleInfo", "Modules": [
            {"Slot": "MainEngines", "Item": "int_engine_size8_class5", "Power": 11.880000, "Priority": 0},
            {"Slot": "Slot05_Size6", "Item": "int_shieldgenerator_size6_class3_fast", "Power": 3.100000, "Priority": 0},
            {"Slot": "TinyHardpoint1", "Item": "hpt_shieldbooster_size0_class5", "Power": 1.200000, "Priority": 0},
            {"Slot": "TinyHardpoint2", "Item": "hpt_shieldbooster_size0_class5", "Power": 1.200000, "Priority": 0},
            {"Slot": "TinyHardpoint3", "Item": "hpt_shieldbooster_size0_class5", "Power": 1.200000, "Priority": 0},
            {"Slot": "TinyHardpoint4", "Item": "hpt_shieldbooster_size0_class5", "Power": 1.200000, "Priority": 0},
            {"Slot": "TinyHardpoint6", "Item": "hpt_shieldbooster_size0_class5", "Power": 1.200000, "Priority": 0},
            {"Slot": "TinyHardpoint7", "Item": "hpt_shieldbooster_size0_class5", "Power": 1.200000, "Priority": 0},
            {"Slot": "FrameShiftDrive", "Item": "int_hyperdrive_overcharge_size7_class5", "Power": 1.008000,
             "Priority": 0},
            {"Slot": "LifeSupport", "Item": "int_lifesupport_size7_class2", "Power": 0.810000, "Priority": 0},
            {"Slot": "PowerDistributor", "Item": "int_powerdistributor_size7_class2", "Power": 0.670000, "Priority": 0},
            {"Slot": "CargoHatch", "Item": "modularcargobaydoor", "Power": 0.600000, "Priority": 2},
            {"Slot": "Radar", "Item": "int_sensors_size7_class2", "Power": 0.530000, "Priority": 0},
            {"Slot": "Slot10_Size1", "Item": "int_dockingcomputer_advanced", "Power": 0.450000, "Priority": 0},
            {"Slot": "TinyHardpoint5", "Item": "hpt_plasmapointdefence_turret_tiny", "Power": 0.200000, "Priority": 0},
            {"Slot": "TinyHardpoint8", "Item": "hpt_plasmapointdefence_turret_tiny", "Power": 0.200000, "Priority": 0},
            {"Slot": "ShipCockpit", "Item": "cutter_cockpit", "Power": 0.000000},
            {"Slot": "PowerPlant", "Item": "int_powerplant_size8_class2", "Power": 0.000000},
            {"Slot": "Slot01_Size8", "Item": "int_cargorack_size8_class1", "Power": 0.000000},
            {"Slot": "Slot02_Size8", "Item": "int_cargorack_size8_class1", "Power": 0.000000},
            {"Slot": "Slot03_Size6", "Item": "int_cargorack_size6_class1", "Power": 0.000000},
            {"Slot": "Slot04_Size6", "Item": "int_cargorack_size6_class1", "Power": 0.000000},
            {"Slot": "Slot06_Size5", "Item": "int_cargorack_size5_class1", "Power": 0.000000},
            {"Slot": "Slot07_Size5", "Item": "int_cargorack_size5_class1", "Power": 0.000000},
            {"Slot": "Slot08_Size4", "Item": "int_cargorack_size4_class1", "Power": 0.000000},
            {"Slot": "Slot09_Size3", "Item": "int_cargorack_size3_class1", "Power": 0.000000},
            {"Slot": "PlanetaryApproachSuite", "Item": "int_planetapproachsuite_advanced", "Power": 0.000000},
            {"Slot": "WeaponColour", "Item": "weaponcustomisation_red", "Power": 0.000000},
            {"Slot": "EngineColour", "Item": "enginecustomisation_red", "Power": 0.000000},
            {"Slot": "DataLinkScanner", "Item": "hpt_shipdatalinkscanner", "Power": 0.000000, "Priority": 0},
            {"Slot": "CodexScanner", "Item": "int_codexscanner", "Power": 0.000000},
            {"Slot": "DiscoveryScanner", "Item": "int_stellarbodydiscoveryscanner_standard", "Power": 0.000000}
        ]}
        """
        # Check if file changed
        if self.get_file_modified_time() == self.last_mod_time:
            logger.debug(f'ModulesInfo.json mod timestamp {self.last_mod_time} unchanged.')
            return self.current_data

        # Read file
        backoff = 1
        while True:
            try:
                with open(self.file_path, 'r') as file:
                    data = json.load(file)
                    break
            except Exception as e:
                logger.error('An error occurred when reading ModulesInfo.json file')
                sleep(backoff)
                logger.debug('Attempting to restart status file reader after failure')
                backoff *= 2

        # Store data
        self.current_data = data
        self.last_mod_time = self.get_file_modified_time()
        logger.debug(f'ModulesInfo.json mod timestamp {self.last_mod_time} updated.')
        # print(json.dumps(data, indent=4))
        return data

    def has_fuel_scoop(self) -> bool:
        """ Gets whether the ship has a fuel scoop.
        """
        # Get latest data
        self.get_module_info_data()

        # Check if there is a route
        if self.current_data['event'] != "ModuleInfo":
            return False

        if self.current_data['Modules'] is None:
            return False

        # Check all modules. Could just check the internals, but this is easier.
        for module in self.current_data['Modules']:
            if "FUELSCOOP" in module['Item'].upper():
                return True

        return False


# Usage Example
if __name__ == "__main__":
    parser = ModulesInfoParser()
    while True:
        item = parser.has_fuel_scoop()
        print(item)
        time.sleep(1)
